package org.apiaddicts.apitools.apigen.generatorcore.config.extractors;

import org.apiaddicts.apitools.apigen.generatorcore.config.entity.Attribute;
import org.apiaddicts.apitools.apigen.generatorcore.config.entity.Column;
import org.apiaddicts.apitools.apigen.generatorcore.config.entity.Entity;
import org.apiaddicts.apitools.apigen.generatorcore.config.entity.Relation;
import org.apiaddicts.apitools.apigen.generatorcore.config.extractors.context.ExtractorContext;
import org.apiaddicts.apitools.apigen.generatorcore.spec.components.ApigenModel;

import java.util.*;
import java.util.stream.Collectors;

import static org.apiaddicts.apitools.apigen.generatorcore.exceptions.GeneratorErrors.*;
import static org.apiaddicts.apitools.apigen.generatorcore.generator.common.ApigenExt2JavapoetType.isComposedID;

public class EntitiesExtractor extends AbstractExtractor {

    private final ValidationsExtractor validationsExtractor;

    public EntitiesExtractor(ExtractorContext context) {
        super(context);
        this.validationsExtractor = new ValidationsExtractor();
    }

    public List<Entity> getEntities(Map<String, ApigenModel> models) {
        ArrayList<Entity> entities = new ArrayList<>();
        if (models != null) {
            models.forEach((key, value) -> {
                Entity entity = toEntity(key, value);
                entities.add(entity);
            });
        }
        return entities;
    }

    private Entity toEntity(String modelName, ApigenModel model) {
        Entity entity = new Entity();
        entity.setName(modelName);
        if (model.getRelationalPersistence() == null) {
            context.registerError(MODEL_WITHOUT_RELATIONAL_PERSISTENCE, modelName);
        } else {
            String table = model.getRelationalPersistence().getTable();
            if (table != null) {
                entity.setTable(table);
            }

            if (model.getAttributes() == null) {
                context.registerError(MODEL_WITHOUT_ATTRIBUTES, modelName);
            } else {
                entity.setAttributes(model.getAttributes().stream().map(a -> toAttribute(modelName, a)).collect(Collectors.toList()));
            }
        }
        return entity;
    }

    private Attribute toAttribute(String modelName, ApigenModel.ApigenModelAttribute modelAttribute) {

        Attribute attribute = new Attribute();

        String attributeName = modelAttribute.getName();
        if (attributeName == null) {
            context.registerError(MODEL_ATTRIBUTE_WITHOUT_NAME, modelName);
        } else {
            attribute.setName(attributeName);
        }

        String type = modelAttribute.getItemsType() == null ?
                modelAttribute.getType() : modelAttribute.getItemsType();
        if (type == null) {
            context.registerError(MODEL_ATTRIBUTE_WITHOUT_TYPE, modelName, attributeName);
        } else {
            attribute.setType(type);
        }

        ApigenModel.AttributeRelationalPersistence relationalPersistence = modelAttribute.getRelationalPersistence();
        if (relationalPersistence == null) {
            context.registerError(MODEL_ATTRIBUTE_WITHOUT_RELATIONAL_PERSISTENCE, modelName, attributeName);
        } else {
            setColumns(attribute, relationalPersistence);
            setForeignColumns(attribute, relationalPersistence);
        }

        attribute.setIsCollection(false);
        setAttributeRelation(attribute, modelAttribute.getType(), modelAttribute);
        attribute.setValidations(validationsExtractor.getValidations(modelAttribute));
        attribute.setAttributes(modelAttribute.getAttributes().stream().map(a -> toAttribute(attributeName, a)).collect(Collectors.toList()));

        return attribute;
    }

    private void setColumns(Attribute attribute, ApigenModel.AttributeRelationalPersistence relationalPersistence) {
        attribute.setColumns(getColumns(relationalPersistence));
    }

    private List<Column> getColumns(ApigenModel.AttributeRelationalPersistence relationalPersistence) {
        List<Column> columns = new ArrayList<>();
        if (relationalPersistence.getColumns() != null) {
            for (Map.Entry<String, String> col : relationalPersistence.getColumns().entrySet()) {
                Column column = new Column();
                column.setName(col.getKey());
                column.setReferenceColumn(col.getValue());
                column.setPrimaryKey(false);
                columns.add(column);
            }
        } else {
            String columnName = relationalPersistence.getColumn();
            Boolean pk = relationalPersistence.isPrimaryKey();
            Boolean autogenerated = relationalPersistence.isAutogenerated();
            String sequence = relationalPersistence.getSequence();
            if (columnName != null || pk) {
                Column column = new Column();
                column.setName(columnName);
                column.setPrimaryKey(pk);
                column.setAutogenerated(autogenerated);
                column.setSequence(sequence);
                columns.add(column);
            }
        }
        return columns;
    }

    private void setForeignColumns(Attribute attribute, ApigenModel.AttributeRelationalPersistence relationalPersistence) {
        attribute.setForeignColumns(getForeignColumns(relationalPersistence));
    }

    private List<Column> getForeignColumns(ApigenModel.AttributeRelationalPersistence relationalPersistence) {
        List<Column> foreignColumns = new ArrayList<>();
        String foreignColumnName = relationalPersistence.getForeignColumn();
        if (foreignColumnName != null) {
            Column foreignColumn = new Column();
            foreignColumn.setName(foreignColumnName);
            foreignColumns.add(foreignColumn);
        } else if (relationalPersistence.getForeignColumns() != null) {
            for (Map.Entry<String, String> col : relationalPersistence.getForeignColumns().entrySet()) {
                Column column = new Column();
                column.setName(col.getKey());
                column.setReferenceColumn(col.getValue());
                foreignColumns.add(column);
            }
        }
        return foreignColumns;
    }

    private void setAttributeRelation(Attribute attribute, String type, ApigenModel.ApigenModelAttribute modelAttribute) {
        if (!isRelation(type)) return;
        Relation relation = new Relation();
        relation.setColumns(new ArrayList<>());
        relation.setReverseColumns(new ArrayList<>());

        if (isCollectionType(type)) {
            String itemsType = modelAttribute.getItemsType();
            attribute.setIsCollection(true);
            relation.setRelatedEntity(itemsType);
            setIntermediateTable(attribute, relation, modelAttribute);
        } else {
            relation.setRelatedEntity(type);
        }
        attribute.setRelation(relation);
    }

    private void setIntermediateTable(Attribute attribute, Relation relation, ApigenModel.ApigenModelAttribute modelAttribute) {
        ApigenModel.AttributeRelationalPersistence relationalPersistence = modelAttribute.getRelationalPersistence();
        if (relationalPersistence == null) {
            context.registerError(MODEL_ATTRIBUTE_WITHOUT_RELATIONAL_PERSISTENCE, attribute.getName());
            return;
        }
        String intermediateTable = relationalPersistence.getIntermediateTable();
        if (intermediateTable != null) {

            attribute.setType(relation.getRelatedEntity());
            attribute.setColumns(new ArrayList<>());
            attribute.setForeignColumns(new ArrayList<>());

            relation.setIntermediateTable(intermediateTable);
            relation.setOwner(relationalPersistence.isOwner());

            relation.setColumns(getColumns(relationalPersistence));
            relation.setReverseColumns(getForeignColumns(relationalPersistence));
        }
    }

    private boolean isRelation(String type) {
        return (isCollectionType(type) || !(isBasicType(type) || isComposedID(type)));
    }

    private boolean isCollectionType(String type) {
        return "Array".equals(type);
    }

    private boolean isBasicType(String type) {
        Set<String> basic = new HashSet<>(Arrays.asList("Boolean", "String", "Long", "Integer", "Float", "Double", "LocalDate", "OffsetDateTime"));
        return basic.contains(type);
    }
}
